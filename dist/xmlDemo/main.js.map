{"version":3,"sources":["./src/environments/environment.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,MAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACdnE;AAAA;AAAA;AAAA;AAA8D;;;AAE9D,gCAAgC;AAMzB,MAAM,YAAY;IAIzB,YAAoB,IAAe;QAAf,SAAI,GAAJ,IAAI,CAAW;QAE9B,IAAI,CAAC,OAAO,EAAE,CAAC;IAEjB,CAAC;IAGH,uBAAuB;IACvB,OAAO;QAEE,aAAa;QACb,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,kBAAkB,EAChC;YACE,OAAO,EAAE,IAAI,gEAAW,EAAE;iBACvB,GAAG,CAAC,cAAc,EAAE,UAAU,CAAC;iBAC/B,MAAM,CAAC,8BAA8B,EAAE,KAAK,CAAC;iBAC7C,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC;iBAC1C,MAAM,CAAC,8BAA8B,EAAE,0FAA0F,CAAC;YACrI,YAAY,EAAE,MAAM;SACrB,CAAC;aACD,SAAS,CAAC,CAAC,IAAI,EAAE,EAAE;YAClB,wBAAwB;YACxB,wBAAwB;YACxB,8BAA8B;YAC9B,UAAU;QACZ,CAAC,CAAC,CAAC;QACH,aAAa;IACf,CAAC;;wEA/BI,YAAY;4FAAZ,YAAY;QCTzB,oEAAG;QAAA,0EAAe;QAAA,4DAAI;;;;;;;;;;;;;;ACAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAwD;AAGE;AACX;;AAYxC,MAAM,SAAS;;kEAAT,SAAS;wFAAT,SAAS,cAFR,2DAAY;6FADb,EAAE,YAHJ;YACP,uEAAa,EAAC,qEAAgB;SAC/B;mIAIU,SAAS,mBARlB,2DAAY,aAGZ,uEAAa,EAAC,qEAAgB;;;;;;;;;;;;;;;;;;;ACXa;AAGF;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,2EAAwB,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;;;;;;;;;;;;ACXpC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,qC","file":"main.js","sourcesContent":["// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","\nimport { HttpClient,HttpHeaders } from '@angular/common/http';\nimport { Component } from '@angular/core';\n// import xml2js from 'xml2js'; \n@Component({\n  selector: 'my-app',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n\npublic xmlItems: any;\n\nconstructor(private http:HttpClient) {\n   \n     this.loadXML(); \n\n   }\n\n\n //getting data function\n loadXML()\n        {\n          /*Read Data*/\n          this.http.get('assets/users.xml',  \n          {  \n            headers: new HttpHeaders()  \n              .set('Content-Type', 'text/xml')  \n              .append('Access-Control-Allow-Methods', 'GET')  \n              .append('Access-Control-Allow-Origin', '*')  \n              .append('Access-Control-Allow-Headers', \"Access-Control-Allow-Headers, Access-Control-Allow-Origin, Access-Control-Request-Method\"),  \n            responseType: 'text'  \n          })  \n          .subscribe((data) => {  \n            // this.parseXML(data)  \n            //   .then((data) => {  \n            //     this.xmlItems = data;  \n            //   });  \n          });  \n          /*Read Data*/\n        }\n\n        //store xml data into array variable\n        // parseXML(data:any) {  \n        //     return new Promise(resolve => {  \n        //       var k: string | number,  \n        //         arr:any = [],  \n        //         parser = new xml2js.Parser(  \n        //           {  \n        //             trim: true,  \n        //             explicitArray: true  \n        //           });  \n        //       parser.parseString(data, function (err:any, result:any) {  \n        //         var obj = result.Employee;  \n        //         for (k in obj.emp) {  \n        //           var item = obj.emp[k];  \n        //           arr.push({  \n        //             id: item.id[0],  \n        //             name: item.name[0],  \n        //             email: item.email[0],  \n                    \n        //           });  \n        //         }  \n        //         resolve(arr);  \n        //       });  \n        //     });  \n        //   }  \n}","<p>formdemo works!</p>\n ","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { AppComponent } from './app.component';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}